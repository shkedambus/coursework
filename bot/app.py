import os
import shutil
from pathlib import Path
from typing import List

import fitz
import gdown
import httpx
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters.command import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext

from chunking import split_text_into_chunks, extract_pdf_structure, process_bullet_points

from shared.logger import get_logger, log_qa
logger = get_logger("bot/app.py")

class AddDocs(StatesGroup):
    waiting_for_url = State()

load_dotenv()
API_TOKEN = os.getenv("API_TOKEN")
RETRIEVER_HOST = os.getenv("RETRIEVER_HOST")
RETRIEVER_PORT = os.getenv("RETRIEVER_PORT")
GENERATOR_HOST = os.getenv("GENERATOR_HOST")
GENERATOR_PORT = os.getenv("GENERATOR_PORT")
ADMIN_USER_ID = int(os.getenv("ADMIN_USER_ID"))

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

class Emoji:
    ERROR = "‚ö†Ô∏è"
    SUCCESS = "‚úÖ"
    PROCESSING = "‚öôÔ∏è"
    THINKING = "ü§î"
    DOCUMENT = "üìÑ"
    DATABASE = "üóÑÔ∏è"
    WARNING = "‚ùó"
    FOLDER = "üìÇ"
    ADD = "üì§"
    CLEAR = "üóëÔ∏è"
    SMILE = "üôÉ"

class Messages:
    WELCOME = (
        f"–ü—Ä–∏–≤–µ—Ç, —è —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç!\n\n"
        "–Ø –º–æ–≥—É:\n"
        f"- {Emoji.DOCUMENT} –î–æ–±–∞–≤–ª—è—Ç—å PDF-–¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–∑ Google Drive –∏–ª–∏ —Ñ–∞–π–ª–æ–≤\n"
        f"- {Emoji.DATABASE} –ò—Å–∫–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö\n"
        f"- {Emoji.WARNING} –û—á–∏—â–∞—Ç—å –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏\n\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–∞–ø–∫—É Google Drive!"
    )
    
    ADD_DOCS = (
        f"{Emoji.DOCUMENT} –û—Ç–ø—Ä–∞–≤—å—Ç–µ:\n"
        "- –°—Å—ã–ª–∫—É –Ω–∞ –ø–∞–ø–∫—É Google Drive —Å PDF\n"
        "- –ò–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ PDF-—Ñ–∞–π–ª –Ω–∞–ø—Ä—è–º—É—é\n\n"
    )

class Buttons:
    CANCEL = InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")
    ADD_DOCS = InlineKeyboardButton(text=f"{Emoji.ADD} –î–æ–±–∞–≤–∏—Ç—å", callback_data="add_docs")
    CLEAR_DB = InlineKeyboardButton(text=f"{Emoji.CLEAR} –û—á–∏—Å—Ç–∏—Ç—å", callback_data="clear_db")
    LIST_FILES = InlineKeyboardButton(text=f"{Emoji.FOLDER} –ú–æ–∏ —Ñ–∞–π–ª—ã", callback_data="list_files")
    
# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è inline –∫–Ω–æ–ø–æ–∫
def main_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [Buttons.ADD_DOCS, Buttons.CLEAR_DB, Buttons.LIST_FILES]
    ])

async def send_data(url: str, data: dict) -> dict:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–µ HTTP –∑–∞–ø—Ä–æ—Å—ã.
    """
    try:
        async with httpx.AsyncClient(timeout=3600.0) as client:
            response = await client.post(url=url, json=data)
            response.raise_for_status()
            return response.json()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
        return {"error": str(e)}

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@dp.message(Command("start", "help"))
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(   
        Messages.WELCOME,
        reply_markup=main_menu()
    )

# –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
@dp.callback_query(F.data == "cancel")
async def handle_cancel(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(f"{Emoji.WARNING} –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await asyncio.sleep(3)
    try:
        await callback.message.delete()
    except:
        pass

# –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (admin only)
@dp.message(Command("drop"))
async def cmd_drop(message: types.Message, state: FSMContext):
    await state.clear()
    user_id = message.from_user.id
    if (user_id == ADMIN_USER_ID):
        url = f"http://{RETRIEVER_HOST}:{RETRIEVER_PORT}/drop"
        data = {"user_id": user_id}
        response = await send_data(url=url, data=data)
        success = response.get("success", False)
        if success:
            await message.answer(f"{Emoji.SUCCESS} –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω–∞")
        else:
            await message.answer(f"{Emoji.ERROR} –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –±–∞–∑—ã")
    else:
        await message.answer(f"{Emoji.WARNING} –≠—Ç–∞ –∫–æ–º–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")

# –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
@dp.callback_query(F.data == "list_files")
async def list_files(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id

    status_message = await callback.message.answer(f"{Emoji.DATABASE} –ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã")

    url = f"http://{RETRIEVER_HOST}:{RETRIEVER_PORT}/list_files"
    data = {"user_id": user_id}
    response = await send_data(url=url, data=data)

    file_names = response.get("file_names")

    if not file_names:
        await status_message.edit_text(f"{Emoji.DATABASE} –í –≤–∞—à–µ–π –±–∞–∑–µ –Ω–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤")
        await callback.answer()
        return

    builder = InlineKeyboardBuilder()
    for i, file_name in enumerate(file_names):
        safe_name = file_name
        if len(file_name) > 30:
            safe_name = file_name[:30] + "..."

        builder.row(InlineKeyboardButton(
            text=safe_name,
            callback_data=f"delete_file_{i}"
        ))
    builder.row(InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel"))

    await state.update_data(files_mapping={f"delete_file_{i}": file_name for i, file_name in enumerate(file_names)})

    # –û–¥–∏–Ω —Å—Ç–æ–ª–±–µ—Ü
    builder.adjust(1)
    markup = builder.as_markup()

    await status_message.edit_text(
        f"{Emoji.FOLDER} –í–∞—à–∏ —Ñ–∞–π–ª—ã. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ç–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:",
        reply_markup=markup
    )
    await callback.answer()

# –£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
@dp.callback_query(F.data.startswith("delete_file_"))
async def cmd_delete_file(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    data = await state.get_data()
    file_name = data["files_mapping"].get(callback.data)

    await callback.message.edit_text(f"{Emoji.PROCESSING} –£–¥–∞–ª—è—é {file_name} –∏–∑ –±–∞–∑—ã")

    url = f"http://{RETRIEVER_HOST}:{RETRIEVER_PORT}/delete_file"
    data = {"user_id": user_id, "file_name": file_name}
    response = await send_data(url=url, data=data)

    success = response.get("success")

    if success:
        message_text = f"{Emoji.SUCCESS} –§–∞–π–ª {file_name} —É–¥–∞–ª—ë–Ω"
    else:
        message_text = f"{Emoji.ERROR} –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞"

    await callback.message.edit_text(message_text)
    await callback.answer()

# –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã
@dp.callback_query(F.data == "clear_db")
async def clear_db(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    url = f"http://{RETRIEVER_HOST}:{RETRIEVER_PORT}/clear"
    data = {"user_id": user_id}
    response = await send_data(url=url, data=data)

    success = response.get("success")
    empty = response.get("empty")

    if success:
        message_text = f"{Emoji.CLEAR} –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞"
        if not empty:
            message_text = f"{Emoji.SUCCESS} –ë–∞–∑–∞ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞"
        await callback.message.answer(message_text)
    else:
        await callback.message.answer(f"{Emoji.ERROR} –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –±–∞–∑—ã")

    await callback.answer()

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑—É
@dp.callback_query(F.data == "add_docs")
async def handle_add_docs(callback: types.CallbackQuery, state: FSMContext):
    add_docs_msg = await callback.message.answer(
        Messages.ADD_DOCS,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[Buttons.CANCEL]])
    )
    await state.set_state(AddDocs.waiting_for_url)
    await state.update_data(add_docs_msg_id=add_docs_msg.message_id)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑—É
@dp.message(AddDocs.waiting_for_url, F.text | F.document)
async def process_input(message: types.Message, state: FSMContext):
    data = await state.get_data()
    add_docs_msg_id = data.get("add_docs_msg_id")
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
    if add_docs_msg_id:
        try:
            await bot.delete_message(chat_id=message.chat.id, message_id=add_docs_msg_id)
        except:
            pass

    if message.document:
        await handle_file(message, state)
    else:
        await handle_url(message, state)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑—É —á–µ—Ä–µ–∑ url –Ω–∞ Google Drive
@dp.message(AddDocs.waiting_for_url, F.text)
async def handle_url(message: types.Message, state: FSMContext):
    link = message.text.strip()
    user_id = message.from_user.id

    status_message = await message.answer(f"{Emoji.DOCUMENT} –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –¥–æ–∫—É–º–µ–Ω—Ç—ã",
                                          reply_markup=InlineKeyboardMarkup(inline_keyboard=[[Buttons.CANCEL]])
    )
    await message.delete()

    tmp_dir = Path(f"tmp_{user_id}")
    tmp_dir.mkdir(exist_ok=True)

    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º –≤—Å—é –ø–∞–ø–∫—É
        gdown.download_folder(link, output=str(tmp_dir), quiet=True, use_cookies=False)

        chunks = []
        file_names = []
        for pdf_path in tmp_dir.glob("*.pdf"):
            text = extract_pdf_structure(str(pdf_path))
            text = process_bullet_points(text)

            file_name = str(pdf_path)
            file_name = file_name.lstrip(f"tmp_{user_id}/")

            for chunk in split_text_into_chunks(text=text, chunk_size=128, overlap=12):
                chunks.append(chunk)
                file_names.append(file_name)

            pdf_path.unlink(missing_ok=True)

        if not chunks:
            await status_message.edit_text(
                f"{Emoji.ERROR} –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø—É—Å—Ç—ã–µ")
            return

        logger.info(f"–°–æ–∑–¥–∞–Ω–æ {len(chunks)} –Ω–æ–≤—ã—Ö —á–∞–Ω–∫–æ–≤. –ù–∞—á–∏–Ω–∞—é —ç–º–±–µ–¥–¥–∏–Ω–≥")
        await status_message.edit_text(f"{Emoji.PROCESSING} –û—Ç–ø—Ä–∞–≤–ª—è—é –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç",
                                       reply_markup=InlineKeyboardMarkup(inline_keyboard=[[Buttons.CANCEL]])
        )

        url = f"http://{RETRIEVER_HOST}:{RETRIEVER_PORT}/upsert"
        data = {"user_id": user_id, "chunks": chunks, "file_names": file_names}
        response = await send_data(url=url, data=data)

        await status_message.edit_text(
            f"{Emoji.SUCCESS} –î–æ–∫—É–º–µ–Ω—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π!")
        await state.clear()

    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", exc_info=True)
        await status_message.edit_text(f"{Emoji.ERROR} –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    finally:
        shutil.rmtree(tmp_dir, ignore_errors=True)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑—É –Ω–∞–ø—Ä—è–º—É—é –∏–∑ —Ñ–∞–π–ª–∞
@dp.message(AddDocs.waiting_for_url, F.document)
async def handle_file(message: types.Message, state: FSMContext):
    if message.document.mime_type != "application/pdf":
        await message.answer(f"{Emoji.ERROR} –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ PDF-—Ñ–∞–π–ª—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
        return
    
    user_id = message.from_user.id
    tmp_dir = Path(f"tmp_{user_id}")
    tmp_dir.mkdir(exist_ok=True)
    
    status_message = await message.answer(f"{Emoji.DOCUMENT} –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –¥–æ–∫—É–º–µ–Ω—Ç",
                                          reply_markup=InlineKeyboardMarkup(inline_keyboard=[[Buttons.CANCEL]]))
    await message.delete()
    
    try:
        file = await bot.get_file(message.document.file_id)
        file_path = tmp_dir / message.document.file_name
        await bot.download_file(file.file_path, destination=file_path)
        
        text = extract_pdf_structure(str(file_path))
        text = process_bullet_points(text)

        if not text:
            await status_message.edit_text(
                f"{Emoji.ERROR} –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø—É—Å—Ç—ã–µ")
            return
    
        chunks = split_text_into_chunks(text=text, chunk_size=128, overlap=12)
        file_names = [message.document.file_name] * len(chunks)
            
        await status_message.edit_text(f"{Emoji.PROCESSING} –û—Ç–ø—Ä–∞–≤–ª—è—é –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç",
                                       reply_markup=InlineKeyboardMarkup(inline_keyboard=[[Buttons.CANCEL]])
        )
        url = f"http://{RETRIEVER_HOST}:{RETRIEVER_PORT}/upsert"
        data = {"user_id": user_id, "chunks": chunks, "file_names": file_names}
        response = await send_data(url=url, data=data)
        
        await status_message.edit_text(f"{Emoji.SUCCESS} –î–æ–∫—É–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π!")
        await state.clear()
        
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞", exc_info=True)
        await status_message.edit_text(f"{Emoji.ERROR} –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
    finally:
        shutil.rmtree(tmp_dir, ignore_errors=True)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞
@dp.message(F.text)
async def handle_question(message: types.Message):
    user_id = message.from_user.id
    query = message.text.strip()
    
    status_message = await message.answer(f"{Emoji.DATABASE} –ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã",
                                          reply_markup=InlineKeyboardMarkup(inline_keyboard=[[Buttons.CANCEL]]))

    try:
        url_1 = f"http://{RETRIEVER_HOST}:{RETRIEVER_PORT}/retrieve"
        data_1 = {"user_id": user_id, "query": query}
        response_1 = await send_data(url=url_1, data=data_1)
        chunks = response_1.get("chunks")

        if not chunks:
            await status_message.edit_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ —ç—Ç–æ–º—É –≤–æ–ø—Ä–æ—Å—É")
            return
        
        context = " ".join(chunks)
        
        await status_message.edit_text(
            f"{Emoji.THINKING} –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã, –¥—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[Buttons.CANCEL]])
        )

        url_2 = f"http://{GENERATOR_HOST}:{GENERATOR_PORT}/summarize"
        data_2 = {"user_id": user_id, "question": query, "context": context}
        response_2 = await send_data(url=url_2, data=data_2)
        summary = response_2.get("summary")

        await status_message.edit_text(summary)
        await status_message.answer(f"{Emoji.SMILE} –ï—Å–ª–∏ —É –≤–∞—Å –µ—â–µ –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, –±—É–¥—É —Ä–∞–¥ –ø–æ–º–æ—á—å!", reply_markup=main_menu())

        url_3 = f"http://{RETRIEVER_HOST}:{RETRIEVER_PORT}/compare"
        data_3 = {"question": query, "context": context, "summary": summary}
        response_3 = await send_data(url=url_3, data=data_3)

        score_question = response_3.get("score_question")
        score_context = response_3.get("score_context")

        log_qa(
            user_id=user_id,
            question=query,
            context=context,
            answer=summary,
            score_question=score_question,
            score_context=score_context
        )

    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–ø—Ä–æ—Å–∞", exc_info=True)
        await status_message.edit_text(f"{Emoji.ERROR} –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
