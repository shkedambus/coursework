import os
import shutil
from pathlib import Path

import fitz
import gdown
import httpx
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters.command import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext

from chunking import split_text_into_chunks

class AddDocs(StatesGroup):
    waiting_for_link = State()

from shared.logger import get_logger, log_qa
logger = get_logger("bot/app.py")

load_dotenv()
API_TOKEN = os.getenv("API_TOKEN")
RETRIEVER_HOST = os.getenv("RETRIEVER_HOST")
RETRIEVER_PORT = os.getenv("RETRIEVER_PORT")
GENERATOR_HOST = os.getenv("GENERATOR_HOST")
GENERATOR_PORT = os.getenv("GENERATOR_PORT")

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

class Emoji:
    ERROR = "‚ö†Ô∏è"
    SUCCESS = "‚úÖ"
    PROCESSING = "‚öôÔ∏è"
    THINKING = "ü§î"
    DOCUMENT = "üìÑ"
    DATABASE = "üóÑÔ∏è"
    WARNING = "‚ùó"

class Messages:
    WELCOME = (
        f"–ü—Ä–∏–≤–µ—Ç, —è —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç!\n\n"
        "–Ø –º–æ–≥—É:\n"
        f"- {Emoji.DOCUMENT} –î–æ–±–∞–≤–ª—è—Ç—å PDF-–¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–∑ Google Drive –∏–ª–∏ —Ñ–∞–π–ª–æ–≤\n"
        f"- {Emoji.DATABASE} –ò—Å–∫–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö\n"
        f"- {Emoji.WARNING} –û—á–∏—â–∞—Ç—å –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏\n\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–∞–ø–∫—É Google Drive!"
    )
    
    ADD_DOCS = (
        f"{Emoji.DOCUMENT} –û—Ç–ø—Ä–∞–≤—å—Ç–µ:\n"
        "- –°—Å—ã–ª–∫—É –Ω–∞ –ø–∞–ø–∫—É Google Drive —Å PDF\n"
        "- –ò–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ PDF-—Ñ–∞–π–ª –Ω–∞–ø—Ä—è–º—É—é\n\n"
    )

class Buttons:
    CANCEL = [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")]
    ADD_DOCS = [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã", callback_data="add_docs")]
    CLEAR_DB = [InlineKeyboardButton(text="–û—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É", callback_data="clear_db")]
    
# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è inline –∫–Ω–æ–ø–æ–∫
def get_main_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[Buttons.ADD_DOCS, Buttons.CLEAR_DB])

def extract_pdf_structure(pdf_path: str, header_font_threshold: int = 14) -> str:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ PDF-—Ñ–∞–π–ª–∞, —Å–æ—Ö—Ä–∞–Ω—è—è —Å—Ç—Ä—É–∫—Ç—É—Ä—É: –∑–∞–≥–æ–ª–æ–≤–∫–∏, –∞–±–∑–∞—Ü—ã –∏ —Å–ø–∏—Å–∫–∏.
    """
    doc = fitz.open(pdf_path)
    structured_text = []

    for page in doc:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–∞—Ä–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        page_dict = page.get_text("dict")
        
        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–º—É –±–ª–æ–∫—É (–æ–±—ã—á–Ω–æ —ç—Ç–æ –∞–±–∑–∞—Ü—ã –∏–ª–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –±–ª–æ–∫–∏)
        for block in page_dict["blocks"]:
            if block["type"] == 0:  # 0 –æ–∑–Ω–∞—á–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –±–ª–æ–∫
                block_lines = []
                for line in block["lines"]:
                    line_text = ""
                    max_font_size = 0
                    
                    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Å–ø–∞–Ω—ã –≤ —Å—Ç—Ä–æ–∫—É –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
                    for span in line["spans"]:
                        line_text += span["text"]
                        if span["size"] > max_font_size:
                            max_font_size = span["size"]
                    
                    # –ï—Å–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ø–æ—Ä–æ–≥, —Å—á–∏—Ç–∞–µ–º —Å—Ç—Ä–æ–∫—É –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
                    if max_font_size >= header_font_threshold:
                        # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
                        block_lines.append("\n" + line_text.strip() + "\n")
                    else:
                        block_lines.append(line_text.strip())
                
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å—Ç—Ä–æ–∫–∏ –±–ª–æ–∫–∞ –≤ –æ–¥–∏–Ω –∞–±–∑–∞—Ü
                structured_text.append("\n".join(block_lines))
                # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ —Å—Ç—Ä–æ–∫–∏ –º–µ–∂–¥—É –±–ª–æ–∫–∞–º–∏
                structured_text.append("\n")
    
    return "\n".join(structured_text)

def process_text(text: str) -> str:
    """
    –°–æ–±–∏—Ä–∞–µ—Ç –±—É–ª–ª–µ—Ç-–ø–æ–∏–Ω—Ç—ã –≤ —Ç–µ–∫—Å—Ç–µ –≤ —Å–≤–æ–∏ –±–ª–æ–∫–∏.
    """
    lines = text.splitlines()
    structured_text = []
    i = 0
    n = len(lines)
    
    while i < n:
        line = lines[i].strip()
        if line == "‚Ä¢":
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ –Ω–µ–ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ –±–ª–æ–∫
            bullet_block = [line + " " + lines[i+1].strip() if i+1 < n else ""]
            i += 2
            while i < n and lines[i].strip():
                bullet_block.append(lines[i].strip())
                i += 1
            structured_text.append("\n".join(bullet_block))
        else:
            structured_text.append(line)
            i += 1
    
    return "\n".join(structured_text)

async def send_data(url: str, data: dict) -> dict:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–µ HTTP –∑–∞–ø—Ä–æ—Å—ã.
    """
    try:
        async with httpx.AsyncClient(timeout=3600.0) as client:
            response = await client.post(url=url, json=data)
            response.raise_for_status()
            return response.json()
    except httpx.RequestError as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
        return {"error": str(e)}
    except httpx.HTTPStatusError as e:
        logger.error(f"HTTP –æ—à–∏–±–∫–∞: {e.response.status_code} - {e.response.text}")
        return {"error": str(e)}

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@dp.message(Command("start", "help"))
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(   
        Messages.WELCOME,
        reply_markup=get_main_keyboard()
    )

# –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
@dp.callback_query(F.data == "cancel")
async def handle_cancel(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(
        f"{Emoji.WARNING} –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=get_main_keyboard()
    )

# –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã
@dp.callback_query(F.data == "clear_db")
async def clear_db(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    url = f"http://{RETRIEVER_HOST}:{RETRIEVER_PORT}/clear"
    data = {"user_id": user_id}
    response = await send_data(url=url, data=data)
    error = response.get("error", "")
    if not error:
        await callback.message.answer(f"{Emoji.SUCCESS} –ë–∞–∑–∞ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞", reply_markup=InlineKeyboardMarkup(inline_keyboard=[Buttons.ADD_DOCS]))
    else:
        await callback.message.answer(f"{Emoji.ERROR} –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –±–∞–∑—ã", reply_markup=get_main_keyboard())

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑—É
@dp.callback_query(F.data == "add_docs")
async def handle_add_docs(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer(
        Messages.ADD_DOCS,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[Buttons.CANCEL])
    )
    await state.set_state(AddDocs.waiting_for_link)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑—É
@dp.message(AddDocs.waiting_for_link, F.text | F.document)
async def process_input(message: types.Message, state: FSMContext):
    if message.document:
        await process_document(message, state)
    else:
        await process_link(message, state)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑—É —á–µ—Ä–µ–∑ url –Ω–∞ Google Drive
@dp.message(AddDocs.waiting_for_link, F.text)
async def process_link(message: types.Message, state: FSMContext):
    link = message.text.strip()
    user_id = message.from_user.id
    status_message = await message.answer(f"{Emoji.DOCUMENT} –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –¥–æ–∫—É–º–µ–Ω—Ç—ã...",
                                          reply_markup=InlineKeyboardMarkup(inline_keyboard=[Buttons.CANCEL])
    )
    tmp_dir = Path(f"tmp_{user_id}")
    tmp_dir.mkdir(exist_ok=True)

    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º –≤—Å—é –ø–∞–ø–∫—É
        gdown.download_folder(link, output=str(tmp_dir), quiet=True, use_cookies=False)

        chunks = []
        for pdf_path in tmp_dir.glob("*.pdf"):
            text = extract_pdf_structure(str(pdf_path))
            text = process_text(text)
            chunks += split_text_into_chunks(text=text, chunk_size=128, overlap=12)

        if not chunks:
            await status_message.edit_text(
                f"{Emoji.ERROR} –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø—É—Å—Ç—ã–µ",
                reply_markup=get_main_keyboard()
            )
            return

        logger.info(f"–°–æ–∑–¥–∞–Ω–æ {len(chunks)} –Ω–æ–≤—ã—Ö —á–∞–Ω–∫–æ–≤. –ù–∞—á–∏–Ω–∞—é —ç–º–±–µ–¥–¥–∏–Ω–≥...")
        await status_message.edit_text(f"{Emoji.PROCESSING} –û—Ç–ø—Ä–∞–≤–ª—è—é –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç...",
                                       reply_markup=InlineKeyboardMarkup(inline_keyboard=[Buttons.CANCEL])
        )

        url = f"http://{RETRIEVER_HOST}:{RETRIEVER_PORT}/upsert"
        data = {"user_id": user_id, "chunks": chunks}
        response = await send_data(url=url, data=data)

        await status_message.edit_text(
            f"{Emoji.SUCCESS} –î–æ–∫—É–º–µ–Ω—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π!",
            reply_markup=get_main_keyboard()
        )
        await state.clear()

    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", exc_info=True)
        await status_message.edit_text(
            f"{Emoji.ERROR} –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
    finally:
        shutil.rmtree(tmp_dir, ignore_errors=True)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑—É –Ω–∞–ø—Ä—è–º—É—é –∏–∑ —Ñ–∞–π–ª–∞
@dp.message(AddDocs.waiting_for_link, F.document)
async def process_document(message: types.Message, state: FSMContext):
    if message.document.mime_type != "application/pdf":
        await message.answer(
            f"{Emoji.ERROR} –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ PDF-—Ñ–∞–π–ª—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞"
        )
        return
    
    status_message = await message.answer(f"{Emoji.DOCUMENT} –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –¥–æ–∫—É–º–µ–Ω—Ç...",
                                          reply_markup=InlineKeyboardMarkup(inline_keyboard=[Buttons.CANCEL]))
    user_id = message.from_user.id
    tmp_dir = Path(f"tmp_{user_id}")
    tmp_dir.mkdir(exist_ok=True)
    
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file = await bot.get_file(message.document.file_id)
        file_path = tmp_dir / message.document.file_name
        await bot.download_file(file.file_path, destination=file_path)
        
        text = extract_pdf_structure(str(file_path))
        text = process_text(text)
        chunks = split_text_into_chunks(text=text, chunk_size=128, overlap=12)
        
        if not chunks:
            await status_message.edit_text(f"{Emoji.ERROR} –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞",
                                           reply_markup=get_main_keyboard()
            )
            return
            
        await status_message.edit_text(f"{Emoji.PROCESSING} –û—Ç–ø—Ä–∞–≤–ª—è—é –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç...",
                                       reply_markup=InlineKeyboardMarkup(inline_keyboard=[Buttons.CANCEL])
        )
        url = f"http://{RETRIEVER_HOST}:{RETRIEVER_PORT}/upsert"
        data = {"user_id": user_id, "chunks": chunks}
        response = await send_data(url=url, data=data)
        
        await status_message.edit_text(f"{Emoji.SUCCESS} –î–æ–∫—É–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π!",
                                       reply_markup=get_main_keyboard()
        )
        await state.clear()
        
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞", exc_info=True)
        await status_message.edit_text(f"{Emoji.ERROR} –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
    finally:
        shutil.rmtree(tmp_dir, ignore_errors=True)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞
@dp.message(F.text)
async def handle_question(message: types.Message):
    user_id = message.from_user.id
    query = message.text.strip()
    
    status_message = await message.answer(f"{Emoji.DATABASE} –ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã...",
                                          reply_markup=InlineKeyboardMarkup(inline_keyboard=[Buttons.CANCEL]))

    try:
        url_1 = f"http://{RETRIEVER_HOST}:{RETRIEVER_PORT}/retrieve"
        data_1 = {"user_id": user_id, "query": query}
        response_1 = await send_data(url=url_1, data=data_1)
        chunks = response_1.get("chunks", [])

        if not chunks:
            await status_message.edit_text(
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ —ç—Ç–æ–º—É –≤–æ–ø—Ä–æ—Å—É.",
                reply_markup=get_main_keyboard()
            )
            return
        
        context = " ".join(chunks)
        
        await status_message.edit_text(
            f"{Emoji.THINKING} –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã, –¥—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º...",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[Buttons.CANCEL])
        )

        url_2 = f"http://{GENERATOR_HOST}:{GENERATOR_PORT}/summarize"
        data_2 = {"user_id": user_id, "question": query, "context": context}
        response_2 = await send_data(url=url_2, data=data_2)
        summary = response_2.get("summary", "")

        await status_message.edit_text(summary)

        url_3 = f"http://{RETRIEVER_HOST}:{RETRIEVER_PORT}/compare"
        data_3 = {"question": query, "context": context, "summary": summary}
        response_3 = await send_data(url=url_3, data=data_3)

        score_question = response_3.get("score_question", 0.0)
        score_context = response_3.get("score_context", 0.0)

        log_qa(
            user_id=user_id,
            question=query,
            context=context,
            answer=summary,
            score_question=score_question,
            score_context=score_context
        )

    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–ø—Ä–æ—Å–∞", exc_info=True)
        await status_message.edit_text(
            f"{Emoji.ERROR} –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞",
            reply_markup=get_main_keyboard()
        )

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
